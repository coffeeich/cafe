#!/usr/bin/env node

var fs   = require("fs");
var path = require("path");
var exec = require("child_process").exec;

exec("which coffee && which cafe", function(error, stdOutput, stdError) {
  if (stdError) {
    console.log(stdError);
  }

  if (error) {
    throw error;
  }

  if (! stdOutput) {
    return;
  }

  var pare = stdOutput.trim().replace(/\n/g, " ").split(/\s+/);

  var coffeePath = fs.realpathSync(pare[0]);
  var cafePath   = fs.realpathSync(pare[1]);

  // check path to CoffeeScript lib dir for CoffeeScript@0.9.6 and node@0.3.0 with not latest npm
  var coffeeLibPath = path.normalize(path.dirname(coffeePath) + "/../lib/node/coffee-script");
  try {
    var stats = fs.statSync(coffeeLibPath);
    if (! stats.isDirectory()) {
      coffeeLibPath = null;
    }
  } catch (ex) {
    coffeeLibPath = null;
  }
  if (! coffeeLibPath) {
    // check path to CoffeeScript lib dir for CoffeeScript@1.2.0 and node@0.6.10 with node from latest npm
    coffeeLibPath = path.normalize(path.dirname(coffeePath) + "/../lib/coffee-script");
    try {
      var stats = fs.statSync(coffeeLibPath);
      if (! stats.isDirectory()) {
        coffeeLibPath = null;
      }
    } catch (ex) {
      coffeeLibPath = null;
    }
  }
  if (! coffeeLibPath) {
    // check path to CoffeeScript lib dir for CoffeeScript@0.9.6 and node@0.6.10 with node from latest npm
    coffeeLibPath = path.normalize(path.dirname(coffeePath) + "/../lib");
    try {
      var stats = fs.statSync(coffeeLibPath);
      if (! stats.isDirectory()) {
        coffeeLibPath = null;
      }
    } catch (ex) {
      coffeeLibPath = null;
    }
  }

  if (! coffeeLibPath) {
    throw Error("Can't find coffee");
  }

  var cafeLibPath   = path.normalize(path.dirname(cafePath)   + "/../lib");

  var coffee       = require(coffeeLibPath);
  var OptionParser = require(coffeeLibPath + "/optparse").OptionParser;
  var Compiler     = require(path.dirname(fs.realpathSync(__filename))+"/compiler").Compiler

  var compiler = new Compiler(
    coffee,
    cafeLibPath,
    new OptionParser(Compiler.options,"").parse(process.argv.slice(2))
  );

  compiler.setPrinter(require("util"));

  compiler.run();
});
